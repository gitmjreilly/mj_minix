; Insightful comment
;

NAMEREG sF, i
NAMEREG sE, j
NAMEREG sD, k

NAMEREG S0, tmp
NAMEREG S1, rx_in
NAMEREG S2, tmp2
NAMEREG S3, loc1
NAMEREG S4, loc2
NAMEREG S5, stat


;
; Reset UART0 buffers (Constant Optimised Port)
; --------------------------------------------
;
CONSTANT UART0_tx_reset, 00000001'b        ; UART0 reset - bit0
CONSTANT UART0_rx_reset, 00000010'b        ; UART0 reset - bit1
CONSTANT UART0_reset, 00000011'b           ; reset Tx and Rx
CONSTANT UART0_operate, 00000000'b         ; Tx and Rx free to operate

; UART 0
; Ports
CONSTANT UART0_output_port, 00
CONSTANT UART0_input_port, 01
CONSTANT UART0_reset_port, 02
CONSTANT UART0_status_port, 03  

; UART 1
; Ports
CONSTANT UART1_output_port, 04
CONSTANT UART1_input_port, 05
CONSTANT UART1_reset_port, 06
CONSTANT UART1_status_port, 07

CONSTANT UART_Tx_data_present, 00000001'b ; Tx   data_present - bit0
CONSTANT UART_Tx_half_full, 00000010'b    ;         half_full - bit1
CONSTANT UART_Tx_full, 00000100'b         ;              full - bit2
CONSTANT UART_Rx_data_present, 00001000'b ; Rx   data_present - bit3
CONSTANT UART_Rx_half_full, 00010000'b    ;         half_full - bit4
CONSTANT UART_Rx_full, 00100000'b         ;              full - bit5




; Ports assigned to DPRAM access
CONSTANT lower_addr_port, 08
CONSTANT upper_addr_port, 09

CONSTANT enable_port, 0A
CONSTANT we_port, 0B
CONSTANT data_out_port, 0C
CONSTANT data_in_port, 0D


;======================================
; Main Program
main:
		; Reset both serial ports...
		call reset_UART0_macros
		call reset_UART1_macros


	;========================
	;=== Loop Over a few output chars
		load tmp2, 05
		load tmp, 65'd
main_1:
		output tmp, UART0_output_port
		call pause
		sub tmp2, 01
		jump nz, main_1
	;========================


	
	
	
	;========================
	; DP Ram Stuff

	outputk 75'd, UART1_output_port
	call pause

	
	; Start with the dpram disabled...
	outputk 00, enable_port
	
	; Set the WE for a read (00) ; write is 0F
	outputk 00, we_port

	; Write the address
	outputk 00, lower_addr_port
	outputk 00, upper_addr_port
	
	; Enable dpram
	outputk 01, enable_port

	; Disable the dpram...
	; Does dpram still provide output when disabled?
	outputk 00, enable_port
	
	; dpram should be output value from address read above.
	; data_in_port needs time to be captured by pipeline register
	input tmp, data_in_port
	output tmp, UART1_output_port
	call pause
	
	input tmp, data_in_port
	output tmp, UART1_output_port
	call pause
	

	input tmp, data_in_port
	output tmp, UART1_output_port
	call pause
	
	input tmp, data_in_port
	output tmp, UART1_output_port
	call pause
	


	; Start with the dpram disabled...
	outputk 00, enable_port

	; ===========================
	; Attempt a write
	; Start with the dpram disabled...
	outputk 00, enable_port
	
	; Set the WE for a read (00) ; write is 0F
	outputk 0F, we_port

	; Write the address
	outputk 01, lower_addr_port
	outputk 02, upper_addr_port
	
	outputk 49'd, data_out_port
	
	; Enable dpram
	outputk 01, enable_port

	; Disable the dpram...
	outputk 00, enable_port
	
	; Finished with write
	; ===========================

	
	; Read the just written value
	; Start with the dpram disabled...
	outputk 00, enable_port
	
	; Set the WE for a read (00) ; write is 0F
	outputk 00, we_port

	; Write the address
	outputk 01, lower_addr_port
	outputk 02, upper_addr_port
	
	; Enable dpram
	outputk 01, enable_port

	; Disable the dpram...
	; Does dpram still provide output when disabled?
	outputk 00, enable_port
	
	; dpram should be output value from address read above.
	; data_in_port needs time to be captured by pipeline register
	input tmp, data_in_port
	output tmp, UART1_output_port
	call pause
	
	input tmp, data_in_port
	output tmp, UART1_output_port
	call pause
	
	input tmp, data_in_port
	output tmp, UART1_output_port
	call pause
	
	input tmp, data_in_port
	output tmp, UART1_output_port
	call pause
	
	
main_3:	jump main_3
	

	;========================
	;=== Loop over uart0
main_2:

		CALL UART0_RX
		; ; Test for F
		COMPARE rx_in, 70'd 
		CALL Z, full_tran
		
		; Test for H
		COMPARE rx_in, 72'd 
		CALL Z, half_tran
		
		; Test for O (Oh)
		COMPARE rx_in, 79'd 
		CALL Z, one_tran
		
		
		
		INPUT stat, UART0_status_port
		
		TEST stat, UART_Tx_data_present
		CALL NZ, output_p

		
		TEST stat, UART_Tx_half_full
		CALL NZ, output_h
		
		TEST stat, UART_Tx_full
		CALL NZ, output_f
		
		load tmp, 32'd
		output tmp, UART1_output_port
		
		load tmp, 62'd
		output tmp, UART1_output_port
		call pause
		jump main_2
	;========================


	
;======================================
full_tran:
		load tmp2, 16'd
		load tmp, 70'd
full_tran_1:
		output tmp, UART0_output_port
		sub tmp2, 01
		jump nz, full_tran_1

		return
;======================================

	
;======================================
half_tran:
		load tmp2, 9'd
		load tmp, 72'd
half_tran_1:
		output tmp, UART0_output_port
		sub tmp2, 01
		jump nz, half_tran_1

		return
;======================================

	
;======================================
one_tran:
		load tmp2, 1'd
		load tmp, 79'd
one_tran_1:
		output tmp, UART0_output_port
		sub tmp2, 01
		jump nz, one_tran_1

		return
;======================================

	
	
		
;======================================
output_f:
		load tmp, 70'd
		output tmp, UART1_output_port
		return
;======================================

;======================================
output_h:
		load tmp, 72'd
		output tmp, UART1_output_port
		return
;======================================

;======================================
output_p:
		load tmp, 80'd
		output tmp,  UART1_output_port
		return
;======================================


;======================================
reset_UART0_macros:
		OUTPUTK UART0_reset,   UART0_reset_port
		OUTPUTK UART0_operate, UART0_reset_port
		RETURN
;======================================


;======================================
reset_UART1_macros:
		OUTPUTK UART0_reset,   UART1_reset_port
		OUTPUTK UART0_operate, UART1_reset_port
		RETURN
;======================================


;======================================
; Read a char (if present) and return it in rx_in
UART0_RX:	
rx_timeout: INPUT loc1, UART0_status_port
			TEST loc1, UART_Rx_data_present             ;Z=0 and C=1 when data present
			JUMP NZ, read_Rx
			LOAD rx_in, 1'd
			return
;
; When character in buffer then read it
;
read_Rx: 	INPUT rx_in, UART0_input_port             ;read character from buffer
			RETURN
;======================================






;======================================
pause:
		load i, FF

L3:		load j, FF

L2:		load k, FF

L1:		sub k, 01
		JUMP NZ, L1

		sub j, 01
		JUMP NZ, L2

		sub i, 01
		JUMP NZ, L3

		RETURN
;======================================
