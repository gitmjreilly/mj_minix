-- COREGEN based RAM
--
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;


entity fifo_test is
    port ( 
		clk : in  STD_LOGIC; -- TODO For now, we assume 50MHz
		reset : in STD_LOGIC;
		cpu_finish : in  STD_LOGIC;
		n_cs : in STD_LOGIC;
		n_rd : in STD_LOGIC;
		n_wr : in STD_LOGIC;
		data_bus : inout STD_LOGIC_VECTOR(15 downto 0);
		addr_bus : in STD_LOGIC_VECTOR(3 downto 0)
	);
end fifo_test;



architecture Behavioral of fifo_test is


	type r_state_type is (r_state_idle, r_state_0, r_state_1);
	type w_state_type is (w_state_idle, w_state_0, w_state_1);

	signal r_state_reg, r_state_next : r_state_type;
	signal w_state_reg, w_state_next : w_state_type;
	
	signal val_reg, val_next : std_logic_vector(15 downto 0);

	
	signal is_read_in_progress  : std_logic; 
	signal is_write_in_progress : std_logic;
	
	signal wea : std_logic_vector(0 downto 0);
	signal wea_next, wea_reg : std_logic_vector(0 downto 0);
	
	signal addra, addrb : std_logic_vector(9 downto 0);
	signal doutb : std_logic_vector(7 downto 0);
	



	COMPONENT blk_mem_gen_v7_3
		PORT (
			clka : IN STD_LOGIC;
			wea : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
			addra : IN STD_LOGIC_VECTOR(9 DOWNTO 0);
			dina : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
			clkb : IN STD_LOGIC;
			addrb : IN STD_LOGIC_VECTOR(9 DOWNTO 0);
			doutb : OUT STD_LOGIC_VECTOR(7 DOWNTO 0)
		);
	END COMPONENT;


begin

	-- 1K, 16 bit word ram generated by coregen
	wea <= wea_reg;
	addra <= "000000" & addr_bus;
	addrb <= addra;
	
	u_1k_block : blk_mem_gen_v7_3
		PORT MAP (
			clka => clk, -- clk from entity
			wea => wea,
			addra =>  addra,
			dina => data_bus(7 downto 0),
			clkb => clk,
			addrb => addrb,
			doutb => doutb
		);


		
	-----------------------------------------------------------------
	-- These 2 signals indicate either a read or write is in 
	-- progress by the host.
	-- They are asserted during the entire microcode cycle.
	-- They are NOT edge based.
	-- Please note all reads and writes are from the host's perspective
	is_read_in_progress  <= '1' when ((n_cs = '0') and (n_rd = '0')) else '0';
	is_write_in_progress <= '1' when ((n_cs = '0') and (n_wr = '0')) else '0';
	-----------------------------------------------------------------

		


	-----------------------------------------------------------------
	-- Host Read/Write FSM Synchronous process 
	-- All that happens here is the state change
	-- AND assignment of any internal storage
	process(
		clk, reset, 
		w_state_next, 
		wea_next,
		val_next
	)
	begin
		if reset = '1' then
			w_state_reg <= w_state_idle;
			r_state_reg <= r_state_idle;
			wea_reg <= "0";
			val_reg <= (others => '0');
			
		elsif (rising_edge(clk)) then
			w_state_reg <= w_state_next;
			r_state_reg <= r_state_next;
			wea_reg <= wea_next;
			
			val_reg <= val_next;
		end if;	
	end process;
	-----------------------------------------------------------------


	
	-----------------------------------------------------------------
	process (
		w_state_reg, 
		is_write_in_progress, 
		cpu_finish, 
		data_bus
	)


	begin
		w_state_next <= w_state_reg;
		wea_next <= "0";
		
		case w_state_reg is 
			-- A memory cycle can't begin until cpu_finish is asserted
			-- so we wait for it in the idle state.
			when w_state_idle =>

				if (cpu_finish = '1') then
					w_state_next <= w_state_0;
				end if;
				
				
			-- We know a memory cycle may be in progress;
			-- Is it addressed to us?
			when w_state_0 =>
				if (is_write_in_progress = '1') then
					w_state_next <= w_state_1;
					wea_next <= "1";
				else
					w_state_next <= w_state_idle;
				end if;
		
			when w_state_1 =>
				w_state_next <= w_state_idle;
				
				
		end case;
	end process;
	-----------------------------------------------------------------


	
	
	-----------------------------------------------------------------
	-- Combinational State selection
	-- for memory read FSM
	-- This process handles read requests from a host
	process (
		r_state_reg, 
		val_reg,
		is_read_in_progress, 
		addr_bus, cpu_finish,
		doutb
	)
	begin
		r_state_next <= r_state_reg;
		val_next <= val_reg;

		case r_state_reg is 
			-- A memory cycle can't begin until cpu_finish is asserted
			-- so we wait for it in the idle state.
			when r_state_idle =>

				if (cpu_finish = '1') then
					r_state_next <= r_state_0;
				end if;
				
			-- We know a memory cycle may be in progress;
			-- Is it addressed to us?
			when r_state_0 =>
				if (is_read_in_progress = '1') then
					r_state_next <= r_state_1;
				else
				 	r_state_next <= r_state_idle;
				end if;
				
			when r_state_1 =>
				r_state_next <= r_state_idle;
				val_next <= X"00" & doutb;
				
				
		end case;
	end process;
	-----------------------------------------------------------------

	

	-----------------------------------------------------------------
	-- If a read is in progress (determined combinatorially),
	-- we drive the data bus with the register containing the 
	-- the requested value val_reg.  val_reg was populated
	-- by the state machine above.
	process (is_read_in_progress, val_reg)
	begin
		if (is_read_in_progress = '1') then
			data_bus <= val_reg;
		else
			data_bus <= (others => 'Z');
		end if;	
	end process;
	-----------------------------------------------------------------
	
	
		
end Behavioral;

